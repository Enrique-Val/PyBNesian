name: Create release wheels / Do not publish!

on: workflow_dispatch

jobs:
  build_win_macos:
    name: Create Windows and MacOS wheels.
    
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
        python-version: [3.7, 3.8, 3.9, 3.10]
        
    steps:
    - uses: actions/checkout@v3
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Download OpenCL SDK
      if: matrix.os == 'windows-latest'
      uses: suisei-cn/actions-download-file@v1.0.1
      with:
        url: "https://github.com/GPUOpen-LibrariesAndSDKs/OCL-SDK/files/1406216/lightOCLSDK.zip"
        target: "."
        
    - name: Unzip OpenCL SDK
      if: matrix.os == 'windows-latest'
      run: |
        mkdir OCLSDK
        7z x lightOCLSDK.zip -oOCLSDK
        
    - name: Install python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools
        python -m pip install wheel
          
    - name: Build wheel
      env:
        OCL_ROOT: OCLSDK
      run: |
        python setup.py bdist_wheel

    - name: Cache wheel
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}_${{ matrix.python-version }}_wheel
        path: dist/*
    
          
  build_manylinux2010:
    name: Create manylinux2010 wheels.
    
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: [cp37-cp37m, cp38-cp38, cp39-cp39, cp310-cp310]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build (manylinux2010)
      uses: RalfG/python-wheels-manylinux-build@v0.5.0-manylinux2010_x86_64
      with:
        python-versions: ${{ matrix.python-version }}
        build-requirements: 'pybind11 numpy pyarrow'
        system-packages: 'opencl-headers ocl-icd ocl-icd-devel'
        pip-wheel-args: '-w ./dist --no-deps'

    - name: Retrieve Python version
      run: |
        echo "PYVERSION=$(echo ${{ matrix.python-version }} | sed -r 's/.*cp([0-9])([0-9]+).*/\1.\2/')" >> $GITHUB_ENV

    - name: Cache wheel
      uses: actions/upload-artifact@v3
      with:
        name: ubuntu-latest_${{ env.PYVERSION }}_wheel
        path: dist/*manylinux2010*.whl
        
  sdist:
    name: Create source release
    
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.8

    - name: Create source distribution
      run: |
        python setup.py sdist

    - name: Cache source distribution
      uses: actions/upload-artifact@v3
      with:
        name: source_distribution
        path: dist/*