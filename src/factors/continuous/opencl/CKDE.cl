#line 1 "src/factors/continuous/opencl/CKDE.cl.src"

/*
 *****************************************************************************
 **       This file was autogenerated from a template  DO NOT EDIT!!!!      **
 **       Changes should be made to the original source (.src) file         **
 *****************************************************************************
 */

#line 1
/* This code assumes column major data for matrices. */

#define IDX(i, j, rows) (i) + ((j)*(rows))
#define ROW(idx, rows) (idx) % (rows)
#define COL(idx, rows) (idx) / (rows)

#define MAX_ASSIGN(n1, n2) n1 = max((n1), (n2))
#define SUM_ASSIGN(n1, n2) n1 += (n2)

#line 13

__kernel void logpdf_values_1d_double(__constant double *train_vector,
                                    __constant double *test_vector,
                                    __private uint test_index,
                                    __constant double *standard_deviation,
                                    __private double lognorm_factor,
                                    __global double *result) 
{
    int i = get_global_id(0);
    double d = (train_vector[i] - test_vector[test_index]) / standard_deviation[0];
    result[i] = (-0.5*d*d) + lognorm_factor;
}

__kernel void logpdf_values_1d_matrix_double(__constant double *train_vector,
                                           __private uint train_rows,
                                           __constant double *test_vector,
                                           __constant double *standard_deviation,
                                           __private double lognorm_factor,
                                           __global double *result) 
{
    int i = get_global_id(0);
    int train_idx = ROW(i, train_rows);
    int test_idx = COL(i, train_rows);
    double d = (train_vector[train_idx] - test_vector[test_idx]) / standard_deviation[0];

    result[i] = (-0.5*d*d) + lognorm_factor;
}



#line 47

__kernel void max1d_double(__constant double *input,
                                      __private uint input_length,
                                      __local double *localMaxs,
                                      __global double *output,
                                      __private uint output_offset)
{
    uint global_id = get_global_id(0);
    uint local_id = get_local_id(0);
    uint group_size = get_local_size(0);
    uint group_id = get_group_id(0);
    uint num_groups = get_num_groups(0);

    if (group_id == num_groups-1) {
        group_size = input_length - group_id*group_size;

        if (global_id < input_length) {
            localMaxs[local_id] = input[global_id];
        }
    }
    else {
        localMaxs[local_id] = input[global_id];
    }

    while (group_size > 1) {
        int stride = group_size / 2;
        barrier(CLK_LOCAL_MEM_FENCE);
        if (group_size % 2 == 0) {
            if (local_id < stride) {
                MAX_ASSIGN(localMaxs[local_id], localMaxs[local_id + stride]);
            }

            group_size = group_size / 2;
        }
        else {
            if (local_id < stride) {
                MAX_ASSIGN(localMaxs[local_id + 1], localMaxs[local_id + 1 + stride]);
            }
            group_size = (group_size / 2) + 1;
        }
    }

    if (local_id == 0) {
        output[output_offset + group_id] = localMaxs[0];
    }
}

__kernel void max_mat_cols_double(__constant double *mat,
                                             __private uint mat_rows,
                                             __local double *localMaxs,
                                             __global double *output)
{
    uint global_id_row = get_global_id(0);
    uint global_id_col = get_global_id(1);
    uint local_id = get_local_id(0);
    uint group_size = get_local_size(0);
    uint group_id = get_group_id(0);
    uint num_groups = get_num_groups(0);


    if (group_id == num_groups-1) {
        group_size = mat_rows - group_id*group_size;

        if (global_id_row < mat_rows) {
            localMaxs[local_id] = mat[IDX(global_id_row, global_id_col, mat_rows)];
        }
    }
    else {
        localMaxs[local_id] = mat[IDX(global_id_row, global_id_col, mat_rows)];
    }

    while (group_size > 1) {
        int stride = group_size / 2;
        barrier(CLK_LOCAL_MEM_FENCE);
        if (group_size % 2 == 0) {
            if (local_id < stride) {
                MAX_ASSIGN(localMaxs[local_id], localMaxs[local_id + stride]);
            }
            group_size = group_size / 2;
        }
        else {
            if (local_id < stride) {
                MAX_ASSIGN(localMaxs[local_id+1], localMaxs[local_id+1+stride]);
            }
            group_size = (group_size / 2) + 1;
        }
    }

    if (local_id == 0) {
        output[IDX(group_id, global_id_col, num_groups)] = localMaxs[0];
    }
}


#line 47

__kernel void sum1d_double(__constant double *input,
                                      __private uint input_length,
                                      __local double *localMaxs,
                                      __global double *output,
                                      __private uint output_offset)
{
    uint global_id = get_global_id(0);
    uint local_id = get_local_id(0);
    uint group_size = get_local_size(0);
    uint group_id = get_group_id(0);
    uint num_groups = get_num_groups(0);

    if (group_id == num_groups-1) {
        group_size = input_length - group_id*group_size;

        if (global_id < input_length) {
            localMaxs[local_id] = input[global_id];
        }
    }
    else {
        localMaxs[local_id] = input[global_id];
    }

    while (group_size > 1) {
        int stride = group_size / 2;
        barrier(CLK_LOCAL_MEM_FENCE);
        if (group_size % 2 == 0) {
            if (local_id < stride) {
                SUM_ASSIGN(localMaxs[local_id], localMaxs[local_id + stride]);
            }

            group_size = group_size / 2;
        }
        else {
            if (local_id < stride) {
                SUM_ASSIGN(localMaxs[local_id + 1], localMaxs[local_id + 1 + stride]);
            }
            group_size = (group_size / 2) + 1;
        }
    }

    if (local_id == 0) {
        output[output_offset + group_id] = localMaxs[0];
    }
}

__kernel void sum_mat_cols_double(__constant double *mat,
                                             __private uint mat_rows,
                                             __local double *localMaxs,
                                             __global double *output)
{
    uint global_id_row = get_global_id(0);
    uint global_id_col = get_global_id(1);
    uint local_id = get_local_id(0);
    uint group_size = get_local_size(0);
    uint group_id = get_group_id(0);
    uint num_groups = get_num_groups(0);


    if (group_id == num_groups-1) {
        group_size = mat_rows - group_id*group_size;

        if (global_id_row < mat_rows) {
            localMaxs[local_id] = mat[IDX(global_id_row, global_id_col, mat_rows)];
        }
    }
    else {
        localMaxs[local_id] = mat[IDX(global_id_row, global_id_col, mat_rows)];
    }

    while (group_size > 1) {
        int stride = group_size / 2;
        barrier(CLK_LOCAL_MEM_FENCE);
        if (group_size % 2 == 0) {
            if (local_id < stride) {
                SUM_ASSIGN(localMaxs[local_id], localMaxs[local_id + stride]);
            }
            group_size = group_size / 2;
        }
        else {
            if (local_id < stride) {
                SUM_ASSIGN(localMaxs[local_id+1], localMaxs[local_id+1+stride]);
            }
            group_size = (group_size / 2) + 1;
        }
    }

    if (local_id == 0) {
        output[IDX(group_id, global_id_col, num_groups)] = localMaxs[0];
    }
}




__kernel void logsumexp_coeffs_double(__global double *input,
                                    __constant double *max,
                                    __private uint max_offset) {
    uint idx = get_global_id(0);
    input[idx] = exp(input[idx] - max[max_offset]);
}

__kernel void logsumexp_coeffs_mat_double(__global double *input,
                                        __private uint input_rows,
                                        __constant double *max) {
    uint idx = get_global_id(0);
    uint col = COL(idx, input_rows);
    input[idx] = exp(input[idx] - max[col]);
}

__kernel void copy_logpdf_result_double(__constant double *sum,
                                      __private uint sum_offset,
                                      __constant double *max,
                                      __private uint max_offset,
                                      __global double *res,
                                      __private uint res_offset) {
    res[res_offset] = max[max_offset] + log(sum[sum_offset]);
}

__kernel void maxwise_double(__global double *max_buffer,
                            __constant double *other) {
    uint i = get_global_id(0);
    max_buffer[i] = max(max_buffer[i], other[i]);
}

__kernel void sum_lse_coefficient_double(__constant double *logpdf, __constant double *max_vec, __global double *lse_total) {
    uint idx = get_global_id(0);
    lse_total[idx] += exp(logpdf[idx] - max_vec[idx]);
}

__kernel void finish_lse_double(__global double *res, __constant double *max_vec) {
    uint idx = get_global_id(0);
    res[idx] = log(res[idx]) + max_vec[idx];
}


__kernel void substract_matrix_double(__constant double *training_matrix,
                                        __private uint training_rows,
                                        __constant double *test_matrix,
                                        __private uint test_rows,
                                        __private uint test_row_idx,
                                        __global double *res
                                )
{
    int i = get_global_id(0);

    int r = ROW(i, training_rows);
    int c = COL(i, training_rows);

    res[i] = test_matrix[IDX(test_row_idx, c, test_rows)] - training_matrix[i];
}


__kernel void solve_double(__global double *diff_matrix, 
                        __private uint diff_matrix_rows, 
                        __private uint matrices_cols,
                        __constant double *cholesky_matrix) {
    uint r = get_global_id(0);
    
    for (uint c = 0; c < matrices_cols; c++) {
        for (uint i = 0; i < c; i++) {
            diff_matrix[IDX(r, c, diff_matrix_rows)] -= cholesky_matrix[IDX(c, i, matrices_cols)] * diff_matrix[IDX(r, i, diff_matrix_rows)];
        }
        diff_matrix[IDX(r, c, diff_matrix_rows)] /= cholesky_matrix[IDX(c, c, matrices_cols)];
    }
}

__kernel void square_double(__global double *m) {
    uint idx = get_global_id(0);
    double d = m[idx];
    m[idx] = d * d;
}

__kernel void logpdf_values_double(__constant double *square_data,
                                __private uint square_cols,
                                __global double *sol_vec,
                                __private double lognorm_factor) {
    uint sol_row = get_global_id(0);
    uint square_rows = get_global_size(0);

    sol_vec[sol_row] = square_data[IDX(sol_row, 0, square_rows)];
    for (uint i = 1; i < square_cols; i++) {
        sol_vec[sol_row] += square_data[IDX(sol_row, i, square_rows)];
    }

    sol_vec[sol_row] = (-0.5 * sol_vec[sol_row]) + lognorm_factor;
}


__kernel void logpdf_values_mat_double(__constant double *square_data,
                                     __private uint square_cols,
                                     __global double *sol_mat,
                                     __private uint sol_rows,
                                     __private uint sol_row_idx,
                                     __private double lognorm_factor) {
    uint test_idx = get_global_id(0);
    uint square_rows = get_global_size(0);
    
    uint sol_idx = IDX(sol_row_idx, test_idx, sol_rows);
    sol_mat[sol_idx] = square_data[IDX(test_idx, 0, square_rows)];
    for (uint i = 1; i < square_cols; i++) {
        sol_mat[sol_idx] += square_data[IDX(test_idx, i, square_rows)];
    }

    sol_mat[sol_idx] = (-0.5 * sol_mat[sol_idx]) + lognorm_factor;
}


#line 13

__kernel void logpdf_values_1d_float(__constant float *train_vector,
                                    __constant float *test_vector,
                                    __private uint test_index,
                                    __constant float *standard_deviation,
                                    __private float lognorm_factor,
                                    __global float *result) 
{
    int i = get_global_id(0);
    float d = (train_vector[i] - test_vector[test_index]) / standard_deviation[0];
    result[i] = (-0.5*d*d) + lognorm_factor;
}

__kernel void logpdf_values_1d_matrix_float(__constant float *train_vector,
                                           __private uint train_rows,
                                           __constant float *test_vector,
                                           __constant float *standard_deviation,
                                           __private float lognorm_factor,
                                           __global float *result) 
{
    int i = get_global_id(0);
    int train_idx = ROW(i, train_rows);
    int test_idx = COL(i, train_rows);
    float d = (train_vector[train_idx] - test_vector[test_idx]) / standard_deviation[0];

    result[i] = (-0.5*d*d) + lognorm_factor;
}



#line 47

__kernel void max1d_float(__constant float *input,
                                      __private uint input_length,
                                      __local float *localMaxs,
                                      __global float *output,
                                      __private uint output_offset)
{
    uint global_id = get_global_id(0);
    uint local_id = get_local_id(0);
    uint group_size = get_local_size(0);
    uint group_id = get_group_id(0);
    uint num_groups = get_num_groups(0);

    if (group_id == num_groups-1) {
        group_size = input_length - group_id*group_size;

        if (global_id < input_length) {
            localMaxs[local_id] = input[global_id];
        }
    }
    else {
        localMaxs[local_id] = input[global_id];
    }

    while (group_size > 1) {
        int stride = group_size / 2;
        barrier(CLK_LOCAL_MEM_FENCE);
        if (group_size % 2 == 0) {
            if (local_id < stride) {
                MAX_ASSIGN(localMaxs[local_id], localMaxs[local_id + stride]);
            }

            group_size = group_size / 2;
        }
        else {
            if (local_id < stride) {
                MAX_ASSIGN(localMaxs[local_id + 1], localMaxs[local_id + 1 + stride]);
            }
            group_size = (group_size / 2) + 1;
        }
    }

    if (local_id == 0) {
        output[output_offset + group_id] = localMaxs[0];
    }
}

__kernel void max_mat_cols_float(__constant float *mat,
                                             __private uint mat_rows,
                                             __local float *localMaxs,
                                             __global float *output)
{
    uint global_id_row = get_global_id(0);
    uint global_id_col = get_global_id(1);
    uint local_id = get_local_id(0);
    uint group_size = get_local_size(0);
    uint group_id = get_group_id(0);
    uint num_groups = get_num_groups(0);


    if (group_id == num_groups-1) {
        group_size = mat_rows - group_id*group_size;

        if (global_id_row < mat_rows) {
            localMaxs[local_id] = mat[IDX(global_id_row, global_id_col, mat_rows)];
        }
    }
    else {
        localMaxs[local_id] = mat[IDX(global_id_row, global_id_col, mat_rows)];
    }

    while (group_size > 1) {
        int stride = group_size / 2;
        barrier(CLK_LOCAL_MEM_FENCE);
        if (group_size % 2 == 0) {
            if (local_id < stride) {
                MAX_ASSIGN(localMaxs[local_id], localMaxs[local_id + stride]);
            }
            group_size = group_size / 2;
        }
        else {
            if (local_id < stride) {
                MAX_ASSIGN(localMaxs[local_id+1], localMaxs[local_id+1+stride]);
            }
            group_size = (group_size / 2) + 1;
        }
    }

    if (local_id == 0) {
        output[IDX(group_id, global_id_col, num_groups)] = localMaxs[0];
    }
}


#line 47

__kernel void sum1d_float(__constant float *input,
                                      __private uint input_length,
                                      __local float *localMaxs,
                                      __global float *output,
                                      __private uint output_offset)
{
    uint global_id = get_global_id(0);
    uint local_id = get_local_id(0);
    uint group_size = get_local_size(0);
    uint group_id = get_group_id(0);
    uint num_groups = get_num_groups(0);

    if (group_id == num_groups-1) {
        group_size = input_length - group_id*group_size;

        if (global_id < input_length) {
            localMaxs[local_id] = input[global_id];
        }
    }
    else {
        localMaxs[local_id] = input[global_id];
    }

    while (group_size > 1) {
        int stride = group_size / 2;
        barrier(CLK_LOCAL_MEM_FENCE);
        if (group_size % 2 == 0) {
            if (local_id < stride) {
                SUM_ASSIGN(localMaxs[local_id], localMaxs[local_id + stride]);
            }

            group_size = group_size / 2;
        }
        else {
            if (local_id < stride) {
                SUM_ASSIGN(localMaxs[local_id + 1], localMaxs[local_id + 1 + stride]);
            }
            group_size = (group_size / 2) + 1;
        }
    }

    if (local_id == 0) {
        output[output_offset + group_id] = localMaxs[0];
    }
}

__kernel void sum_mat_cols_float(__constant float *mat,
                                             __private uint mat_rows,
                                             __local float *localMaxs,
                                             __global float *output)
{
    uint global_id_row = get_global_id(0);
    uint global_id_col = get_global_id(1);
    uint local_id = get_local_id(0);
    uint group_size = get_local_size(0);
    uint group_id = get_group_id(0);
    uint num_groups = get_num_groups(0);


    if (group_id == num_groups-1) {
        group_size = mat_rows - group_id*group_size;

        if (global_id_row < mat_rows) {
            localMaxs[local_id] = mat[IDX(global_id_row, global_id_col, mat_rows)];
        }
    }
    else {
        localMaxs[local_id] = mat[IDX(global_id_row, global_id_col, mat_rows)];
    }

    while (group_size > 1) {
        int stride = group_size / 2;
        barrier(CLK_LOCAL_MEM_FENCE);
        if (group_size % 2 == 0) {
            if (local_id < stride) {
                SUM_ASSIGN(localMaxs[local_id], localMaxs[local_id + stride]);
            }
            group_size = group_size / 2;
        }
        else {
            if (local_id < stride) {
                SUM_ASSIGN(localMaxs[local_id+1], localMaxs[local_id+1+stride]);
            }
            group_size = (group_size / 2) + 1;
        }
    }

    if (local_id == 0) {
        output[IDX(group_id, global_id_col, num_groups)] = localMaxs[0];
    }
}




__kernel void logsumexp_coeffs_float(__global float *input,
                                    __constant float *max,
                                    __private uint max_offset) {
    uint idx = get_global_id(0);
    input[idx] = exp(input[idx] - max[max_offset]);
}

__kernel void logsumexp_coeffs_mat_float(__global float *input,
                                        __private uint input_rows,
                                        __constant float *max) {
    uint idx = get_global_id(0);
    uint col = COL(idx, input_rows);
    input[idx] = exp(input[idx] - max[col]);
}

__kernel void copy_logpdf_result_float(__constant float *sum,
                                      __private uint sum_offset,
                                      __constant float *max,
                                      __private uint max_offset,
                                      __global float *res,
                                      __private uint res_offset) {
    res[res_offset] = max[max_offset] + log(sum[sum_offset]);
}

__kernel void maxwise_float(__global float *max_buffer,
                            __constant float *other) {
    uint i = get_global_id(0);
    max_buffer[i] = max(max_buffer[i], other[i]);
}

__kernel void sum_lse_coefficient_float(__constant float *logpdf, __constant float *max_vec, __global float *lse_total) {
    uint idx = get_global_id(0);
    lse_total[idx] += exp(logpdf[idx] - max_vec[idx]);
}

__kernel void finish_lse_float(__global float *res, __constant float *max_vec) {
    uint idx = get_global_id(0);
    res[idx] = log(res[idx]) + max_vec[idx];
}


__kernel void substract_matrix_float(__constant float *training_matrix,
                                        __private uint training_rows,
                                        __constant float *test_matrix,
                                        __private uint test_rows,
                                        __private uint test_row_idx,
                                        __global float *res
                                )
{
    int i = get_global_id(0);

    int r = ROW(i, training_rows);
    int c = COL(i, training_rows);

    res[i] = test_matrix[IDX(test_row_idx, c, test_rows)] - training_matrix[i];
}


__kernel void solve_float(__global float *diff_matrix, 
                        __private uint diff_matrix_rows, 
                        __private uint matrices_cols,
                        __constant float *cholesky_matrix) {
    uint r = get_global_id(0);
    
    for (uint c = 0; c < matrices_cols; c++) {
        for (uint i = 0; i < c; i++) {
            diff_matrix[IDX(r, c, diff_matrix_rows)] -= cholesky_matrix[IDX(c, i, matrices_cols)] * diff_matrix[IDX(r, i, diff_matrix_rows)];
        }
        diff_matrix[IDX(r, c, diff_matrix_rows)] /= cholesky_matrix[IDX(c, c, matrices_cols)];
    }
}

__kernel void square_float(__global float *m) {
    uint idx = get_global_id(0);
    double d = m[idx];
    m[idx] = d * d;
}

__kernel void logpdf_values_float(__constant float *square_data,
                                __private uint square_cols,
                                __global float *sol_vec,
                                __private float lognorm_factor) {
    uint sol_row = get_global_id(0);
    uint square_rows = get_global_size(0);

    sol_vec[sol_row] = square_data[IDX(sol_row, 0, square_rows)];
    for (uint i = 1; i < square_cols; i++) {
        sol_vec[sol_row] += square_data[IDX(sol_row, i, square_rows)];
    }

    sol_vec[sol_row] = (-0.5 * sol_vec[sol_row]) + lognorm_factor;
}


__kernel void logpdf_values_mat_float(__constant float *square_data,
                                     __private uint square_cols,
                                     __global float *sol_mat,
                                     __private uint sol_rows,
                                     __private uint sol_row_idx,
                                     __private float lognorm_factor) {
    uint test_idx = get_global_id(0);
    uint square_rows = get_global_size(0);
    
    uint sol_idx = IDX(sol_row_idx, test_idx, sol_rows);
    sol_mat[sol_idx] = square_data[IDX(test_idx, 0, square_rows)];
    for (uint i = 1; i < square_cols; i++) {
        sol_mat[sol_idx] += square_data[IDX(test_idx, i, square_rows)];
    }

    sol_mat[sol_idx] = (-0.5 * sol_mat[sol_idx]) + lognorm_factor;
}



